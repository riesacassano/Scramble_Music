attach(p_2B)
ld.f1(value, time=level, subject=sub, time.name="level",
description=FALSE)$ANOVA.test
p_1B <- filter(p, scramble == '1B')
attach(p_1B)
ld.f1(value, time=level, subject=sub, time.name="level",
description=FALSE)$ANOVA.test
attach(s)
ld.f2(value, time1=scramble, time2=level, subject=sub,
time1.name="condition", time2.name="level",
description=FALSE)$ANOVA.test
s_I <- filter(s, scramble == 'Intact')
attach(s_I)
ld.f1(value, time=level, subject=sub, time.name="level",
description=FALSE)$ANOVA.test
s_8B <- filter(s, scramble == '8B')
attach(s_8B)
ld.f1(value, time=level, subject=sub, time.name="level",
description=FALSE)$ANOVA.test
pairwise.wilcox.test(s_8B$value, s_8B$level,
p.adjust.method = "bonferroni", paired=TRUE)
s_2B <- filter(s, scramble == '2B')
attach(s_2B)
ld.f1(value, time=level, subject=sub, time.name="level",
description=FALSE)$ANOVA.test
pairwise.wilcox.test(s_2B$value, s_2B$level,
p.adjust.method = "bonferroni", paired=TRUE)
s_1B <- filter(s, scramble == '1B')
attach(s_1B)
ld.f1(value, time=level, subject=sub, time.name="level",
description=FALSE)$ANOVA.test
pairwise.wilcox.test(s_1B$value, s_1B$level,
p.adjust.method = "bonferroni", paired=TRUE)
attach(f)
ld.f2(value, time1=scramble, time2=level, subject=sub,
time1.name="condition", time2.name="level",
description=FALSE)$ANOVA.test
f_I <- filter(f, scramble == 'Intact')
attach(f_I)
ld.f1(value, time=level, subject=sub, time.name="level",
description=FALSE)$ANOVA.test
f_8B <- filter(f, scramble == '8B')
attach(f_8B)
ld.f1(value, time=level, subject=sub, time.name="level",
description=FALSE)$ANOVA.test
pairwise.wilcox.test(f_8B$value, f_8B$level,
p.adjust.method = "bonferroni", paired=TRUE)
f_2B <- filter(f, scramble == '2B')
attach(f_2B)
ld.f1(value, time=level, subject=sub, time.name="level",
description=FALSE)$ANOVA.test
pairwise.wilcox.test(f_2B$value, f_2B$level,
p.adjust.method = "bonferroni", paired=TRUE)
f_1B <- filter(f, scramble == '1B')
attach(f_1B)
ld.f1(value, time=level, subject=sub, time.name="level",
description=FALSE)$ANOVA.test
pairwise.wilcox.test(f_1B$value, f_1B$level,
p.adjust.method = "bonferroni", paired=TRUE)
attach(p_I)
f1.ld.f1(value, time=level, subject=sub, group=Musician,
time.name="level", group.name="expertise",
description=FALSE)$ANOVA.test
attach(p_8B)
f1.ld.f1(value, time=level, subject=sub, group=Musician,
time.name="level", group.name="expertise",
description=FALSE)$ANOVA.test
attach(p_I)
f1.ld.f1(value, time=level, subject=sub, group=Musician,
time.name="level", group.name="expertise",
description=FALSE)$ANOVA.test
knitr::opts_chunk$set(echo = FALSE)
f_16 <- filter(f, level == '16')
f_16 <- filter(f, level == 16)
library(tidyverse)
library(magrittr)
library(nparLD)
select <- dplyr::select
p <- read_csv('../data/combined/multi-level_precision.csv', show_col_types = FALSE)
s <- read_csv('../data/combined/multi-level_sensitivity.csv', show_col_types = FALSE)
f <- read_csv('../data/combined/multi-level_f.csv', show_col_types = FALSE)
p %<>% mutate('...1' = NULL)
s %<>% mutate('...1' = NULL)
f %<>% mutate('...1' = NULL)
# pandas saved an index that we don't really need...
p %<>% pivot_longer(cols = -c(Musician, sub, scramble),
names_to = 'level', values_to = 'value')
s %<>% pivot_longer(cols = -c(Musician, sub, scramble),
names_to = 'level', values_to = 'value')
f %<>% pivot_longer(cols = -c(Musician, sub, scramble),
names_to = 'level', values_to = 'value')
p %<>% mutate(sub = ifelse(Musician == 'Yes', sub, sub + 45))
s %<>% mutate(sub = ifelse(Musician == 'Yes', sub, sub + 45))
f %<>% mutate(sub = ifelse(Musician == 'Yes', sub, sub + 45))
f_16 <- filter(f, level == 16)
attach(f_16)
ld.f1(value, time=scramble, subject=sub, time.name="condition",
description=FALSE)$ANOVA.test
pairwise.wilcox.test(f_16$value, f_16$condition,
p.adjust.method = "bonferroni", paired=TRUE)
pairwise.wilcox.test(f_16$value, f_16$scramble,
p.adjust.method = "bonferroni", paired=TRUE)
f_8 <- filter(f, level == 8)
attach(f_8)
ld.f1(value, time=scramble, subject=sub, time.name="condition",
description=FALSE)$ANOVA.test
pairwise.wilcox.test(f_8$value, f_8$scramble,
p.adjust.method = "bonferroni", paired=TRUE)
f_5 <- filter(f, level == 5)
attach(f_5)
ld.f1(value, time=scramble, subject=sub, time.name="condition",
description=FALSE)$ANOVA.test
pairwise.wilcox.test(f_5$value, f_5$scramble,
p.adjust.method = "bonferroni", paired=TRUE)
f_4 <- filter(f, level == 4)
attach(f_4)
ld.f1(value, time=scramble, subject=sub, time.name="condition",
description=FALSE)$ANOVA.test
pairwise.wilcox.test(f_4$value, f_4$scramble,
p.adjust.method = "bonferroni", paired=TRUE)
f_3 <- filter(f, level == 3)
attach(f_3)
ld.f1(value, time=scramble, subject=sub, time.name="condition",
description=FALSE)$ANOVA.test
f_2 <- filter(f, level == 2)
attach(f_2)
ld.f1(value, time=scramble, subject=sub, time.name="condition",
description=FALSE)$ANOVA.test
f_1 <- filter(f, level == 1)
attach(f_1)
ld.f1(value, time=scramble, subject=sub, time.name="condition",
description=FALSE)$ANOVA.test
library(tidyverse) # version 2.0.0
library(magrittr) # version 2.0.3
library(readxl) # version 1.4.3
library(mvnormtest) # version 0.1-9-3
library(ggpubr) # version 0.6.0
library(rstatix) # version 0.7.2
library(plotrix) # version 3.8-4
library(car) # version 3.1-2
library(effectsize) # version 0.8.9
# set your working directory here!
#setwd()
setwd("/Users/rcassan2/Documents/GitHub/music_annotations_analysis/for_paper_fully_combined/for_pub_repo/E1-E2-E4/scripts")
mydata <- read_excel("../data/data.xlsx")
mydata$Musician <- ifelse(mydata$Musician == "Yes", "Musicians", "Non-musicians")
memory <-mydata[mydata$task == '0',]
prediction <-mydata[mydata$task == '1',]
memory <- memory %>%
gather(key = "scramble", value = "accuracy", memAcc8b, memAcc2b, memAcc1b) %>%
convert_as_factor(LabvancedID, scramble)
prediction <- prediction %>%
gather(key = "scramble", value = "accuracy", predAcc8b, predAcc2b, predAcc1b) %>%
convert_as_factor(LabvancedID, scramble)
segmentation <- mydata %>%
gather(key = "scramble_seg", value = "accuracy", seg_intact, seg_8b, seg_2b, seg_1b) %>%
convert_as_factor(LabvancedID, scramble_seg)
segmentation_1 <- select(segmentation, scramble_seg, Musician, accuracy)
segmentation_noNA <- na.omit(segmentation_1)
# plot accuracy on memory task with standard error (Figure 2A, with legend)
memory %>%
group_by(scramble, Musician) %>%
summarise(mean_accuracy = mean(accuracy, na.rm = TRUE),
sem = std.error(accuracy, na.rm = TRUE)) %>%
ggplot(aes(x = scramble, y = mean_accuracy, fill = Musician, group = Musician)) +
geom_col(position = "dodge", width = 0.9)+
geom_errorbar(aes(ymin=mean_accuracy-sem, ymax=mean_accuracy+sem),
position = position_dodge(width = 0.9),
width=0.4, alpha=0.9, linewidth=.5) +
geom_hline(yintercept = 0.5, linetype = "dotted", color = "black", linewidth = 1) +
scale_x_discrete(labels = c('1B', '2B', '8B')) +
theme_gray(base_size = 16) +
theme(legend.title = element_blank()) +
xlab("Scramble Level") +
ylab("Proportion Correct (Memory)") +
ylim(0, .85)
prediction %>%
group_by(scramble, Musician) %>%
summarise(mean_accuracy = mean(accuracy, na.rm = TRUE),
sem = std.error(accuracy, na.rm = TRUE)) %>%
ggplot(aes(x = scramble, y = mean_accuracy, fill = Musician, group = Musician)) +
geom_col(position = "dodge", width = 0.9)+
geom_errorbar(aes(ymin=mean_accuracy-sem, ymax=mean_accuracy+sem),
position = position_dodge(width = 0.9),
width=0.4, alpha=0.9, linewidth=.5) +
geom_hline(yintercept = 0.5, linetype = "dotted", color = "black", size = 1) +
scale_x_discrete(labels = c('1B', '2B', '8B')) +
theme_gray(base_size = 16) +
theme(legend.title = element_blank()) +
xlab("Scramble Level") +
ylab("Proportion Correct (Prediction)") +
ylim(0, .85)
segmentation_noNA %>%
group_by(scramble_seg, Musician) %>%
summarise(mean_accuracy = mean(accuracy, na.rm = TRUE),
sd = std.error(accuracy, na.rm = TRUE)) %>%
ggplot(aes(x = scramble_seg, y = mean_accuracy, fill=Musician, group = Musician))+
geom_col(position="dodge")+
geom_errorbar( aes(ymin=mean_accuracy-sd, ymax=mean_accuracy+sd), position = position_dodge(width=0.9), width=0.4, alpha=0.9, size=.5) +
geom_hline(yintercept = 0.25, linetype = "dotted", color = "black", size = 1) +  # Increase the size parameter
theme_gray(base_size = 16) +
theme(legend.title = element_blank(), legend.text = element_text(size = 12)) +
xlab("Scramble Level") +
ylab("Proportion Correct") +
scale_x_discrete(labels = c("1B", "2B", "8B", "Intact")) +
ylim(0, 0.85)
# is the interaction significant?
lm.memory_noint <- lm(accuracy ~ Musician+scramble, data = memory)
lm.memory_int <- lm(accuracy ~ Musician*scramble, data = memory)
anova(lm.memory_noint, lm.memory_int)
# because the model with the interaction is not significantly more explanatory than the model without, we'll proceed with type II ANOVA
# run the ANOVA
Anova(lm.memory_noint, type="2")
# calculate effect size
eta_squared(Anova(lm.memory_noint, type="2")) # default: partial = TRUE
lm.prediction_noint <- lm(accuracy ~ Musician+scramble, data = prediction)
lm.prediction_int <- lm(accuracy ~ Musician*scramble, data = prediction)
anova(lm.prediction_noint, lm.prediction_int)
lm.prediction <- lm(accuracy ~ Musician*scramble, data = prediction,
contrasts=list(Musician=contr.sum, scramble=contr.sum))
Anova(lm.prediction, type="3")
# calculate effect size
eta_squared(Anova(lm.prediction, type="3"))
# post-hoc test: are participants above chance in 1B? (sanity check)
t.test(filter(prediction, scramble == "predAcc1b")$accuracy, mu = 0.5)
# categorization:
# is the interaction significant?
lm.categ_noint <- lm(accuracy ~ Musician+scramble_seg, data = segmentation_noNA)
lm.categ_int <- lm(accuracy ~ Musician*scramble_seg, data = segmentation_noNA)
anova(lm.categ_noint, lm.categ_int)
# because the model with the interaction is not significantly more explanatory than the model without, we'll proceed with type II ANOVA
Anova(lm.categ_int, type="3")
# run the ANOVA
Anova(lm.categ_noint, type="2")
# calculate effect size
eta_squared(Anova(lm.categ_noint, type="2"))
yrs_info <- mydata %>%
select(`Labvanced ID`, `years musical exp`) %>%
filter(!is.na(`years musical exp`)) %>%
rename(yrs_exp = `years musical exp`)
View(mydata)
# import data
mydata <- read_excel("../data/data.xlsx")
mydata$Musician <- ifelse(mydata$Musician == "Yes", "Musicians", "Non-musicians")
yrs_info <- mydata %>%
select(`LabvancedID`, `years musical exp`) %>%
filter(!is.na(`years musical exp`)) %>%
rename(yrs_exp = `years musical exp`)
yrs_info$yrs_exp[yrs_info$yrs_exp == '15?'] = 15
yrs_info$yrs_exp[yrs_info$yrs_exp == '4? 5?'] = 5
yrs_info$yrs_exp[yrs_info$yrs_exp == '9+'] = 9
yrs_info$yrs_exp <- as.numeric(yrs_info$yrs_exp)
View(yrs_info)
mem_yrs <- yrs_info %>%
left_join(., memory, by = join_by(`Labvanced ID`)) %>%
filter(!is.na(Musician)) %>% # this filters out participants who did prediction, not memory
select(-Musician)
mem_yrs <- yrs_info %>%
left_join(., memory, by = join_by(`LabvancedID`)) %>%
filter(!is.na(Musician)) %>% # this filters out participants who did prediction, not memory
select(-Musician)
yrs_info
yrs_info$LabvancedID <- as.factor(yrs_info$LabvancedID)
mem_yrs <- yrs_info %>%
left_join(., memory, by = join_by(`LabvancedID`)) %>%
filter(!is.na(Musician)) %>% # this filters out participants who did prediction, not memory
select(-Musician)
pred_yrs <- yrs_info %>%
left_join(., prediction, by = join_by(`LabvancedID`)) %>%
filter(!is.na(Musician)) %>%
select(-Musician)
View(mem_yrs)
summary(lm(`overall mem acc` ~ yrs_exp, mem_yrs)) #NS
View(mem_yrs)
mydata$Musician <- ifelse(mydata$Musician == "Yes", "Musicians", "Non-musicians")
memory <-mydata[mydata$task == '0',]
prediction <-mydata[mydata$task == '1',]
memory <- memory %>%
gather(key = "scramble", value = "accuracy", memAcc8b, memAcc2b, memAcc1b) %>%
convert_as_factor(LabvancedID, scramble)
prediction <- prediction %>%
gather(key = "scramble", value = "accuracy", predAcc8b, predAcc2b, predAcc1b) %>%
convert_as_factor(LabvancedID, scramble)
mem_yrs <- yrs_info %>%
left_join(., memory, by = join_by(`LabvancedID`)) %>%
filter(!is.na(Musician)) %>% # this filters out participants who did prediction, not memory
select(-Musician)
pred_yrs <- yrs_info %>%
left_join(., prediction, by = join_by(`LabvancedID`)) %>%
filter(!is.na(Musician)) %>%
select(-Musician)
summary(lm(`overall mem acc` ~ yrs_exp, mem_yrs)) #NS
View(memory)
View(mydata)
yrs_info <- mydata %>%
#select(`LabvancedID`, `years musical exp`) %>%
filter(!is.na(`years musical exp`)) %>%
rename(yrs_exp = `years musical exp`)
View(yrs_info)
# import data
mydata <- read_excel("../data/data.xlsx")
mydata$Musician <- ifelse(mydata$Musician == "Yes", "Musicians", "Non-musicians")
yrs_info <- mydata %>%
#select(`LabvancedID`, `years musical exp`) %>%
filter(!is.na(`years musical exp`)) %>%
rename(yrs_exp = `years musical exp`)
View(yrs_info)
# manually fix some of the values
yrs_info$yrs_exp[yrs_info$yrs_exp == '15?'] = 15
yrs_info$yrs_exp[yrs_info$yrs_exp == '4? 5?'] = 5
yrs_info$yrs_exp[yrs_info$yrs_exp == '9+'] = 9
summary(lm(`overallMemAcc` ~ yrs_exp, yrs_info)) #NS
summary(lm(`memAcc8b` ~ yrs_exp, yrs_info)) # beta = -0.0122, p = .0083
summary(lm(`memAcc2b` ~ yrs_exp, yrs_info)) #NS
summary(lm(`memAcc1b` ~ yrs_exp, yrs_info)) #NS
summary(lm(`overal pred acc` ~ yrs_exp, yrs_info)) #NS
summary(lm(`predAcc8b` ~ yrs_exp, yrs_info)) #NS
summary(lm(`predAcc2b` ~ yrs_exp, yrs_info)) #NS
summary(lm(`predAcc1b` ~ yrs_exp, yrs_info)) #NS
yrs_info$yrs_exp <- as.numeric(yrs_info$yrs_exp)
summary(lm(`overallMemAcc` ~ yrs_exp, yrs_info)) #NS
summary(lm(`memAcc8b` ~ yrs_exp, yrs_info)) # beta = -0.0122, p = .0083
summary(lm(`memAcc2b` ~ yrs_exp, yrs_info)) #NS
summary(lm(`memAcc1b` ~ yrs_exp, yrs_info)) #NS
summary(lm(`overal pred acc` ~ yrs_exp, yrs_info)) #NS
summary(lm(`predAcc8b` ~ yrs_exp, yrs_info)) #NS
summary(lm(`predAcc2b` ~ yrs_exp, yrs_info)) #NS
summary(lm(`predAcc1b` ~ yrs_exp, yrs_info)) #NS
ggplot(mem_yrs, aes(yrs_exp, `8B mem acc`)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(mem_yrs, aes(yrs_exp, `memAcc8b`)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(yrs_info, aes(yrs_exp, `memAcc8b`)) +
geom_point() +
geom_smooth(method = 'lm')
# if we filter out the three people with >20 years experience, does the effect go away?
yrs_info %>%
filter(yrs_exp < 20) %>%
lm(memAcc8b ~ yrs_exp, .) %>%
summary()
yrs_info %>%
filter(yrs_exp < 20) %>%
ggplot(aes(yrs_exp, memAcc8b)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
theme_gray(base_size = 16)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = 'black', alpha = 0.5) +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
theme_gray(base_size = 16)
hue_pal()(3)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', alpha = 0.5) +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
theme_gray(base_size = 16)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', fill = '#F8766D', alpha = 0.5) +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
theme_gray(base_size = 16)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = 'black', fill = '#F8766D', alpha = 0.5) +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
theme_gray(base_size = 16)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D', alpha = 0.5) +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
theme_gray(base_size = 16)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
theme_gray(base_size = 16)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
theme_gray(base_size = 16)
ggsave('../figure_S1A.png', width = 7, height = 5)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
scale_x_continuous(breaks = seq(5,30,5)) +
theme_gray(base_size = 16)
ggsave('../figure_S1A.png', width = 5, height = 5)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
scale_x_continuous(breaks = seq(5,35,5)) +
theme_gray(base_size = 16)
ggsave('../figure_S1A.png', width = 5, height = 5)
ggplot(yrs_info, aes(yrs_exp, overallPredAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Prediction)') +
scale_x_continuous(breaks = seq(5,30,5)) +
theme_gray(base_size = 16)
ggplot(yrs_info, aes(yrs_exp, `overal pred acc`)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Prediction)') +
scale_x_continuous(breaks = seq(5,30,5)) +
theme_gray(base_size = 16)
ggplot(yrs_info, aes(yrs_exp, `overal pred acc`)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Prediction)') +
scale_x_continuous(breaks = seq(5,30,5)) +
theme_gray(base_size = 16)
ggsave('../figure_S1B.png', width = 5, height = 5)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
scale_x_continuous(breaks = seq(5,30,5)) +
theme_gray(base_size = 16)
ggsave('../figure_S1A.png', width = 5, height = 5)
ggplot(yrs_info, aes(yrs_exp, `overal pred acc`)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Prediction)') +
scale_x_continuous(breaks = seq(5,30,5)) +
theme_gray(base_size = 16)
ggsave('../figure_S1B.png', width = 5, height = 5)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
scale_x_continuous(breaks = seq(5,30,5)) +
scale_y_continuous(breaks = seq(0.4, 1, 0.1)) +
theme_gray(base_size = 16)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
scale_x_continuous(breaks = seq(5,30,5)) +
scale_y_continuous(breaks = seq(0.4, 1, 0.1)) +
set_ylim(0.4, 1) +
theme_gray(base_size = 16)
# plot overall memory and prediction accuracy
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
scale_x_continuous(breaks = seq(5,30,5)) +
scale_y_continuous(breaks = seq(0.4, 1, 0.1)) +
ylim(0.4, 1) +
theme_gray(base_size = 16)
ggplot(yrs_info, aes(yrs_exp, `overal pred acc`)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Prediction)') +
scale_x_continuous(breaks = seq(5,30,5)) +
scale_y_continuous(breaks = seq(0.4, 1, 0.1)) +
ylim(0.4, 1) +
theme_gray(base_size = 16)
ggplot(yrs_info, aes(yrs_exp, overallMemAcc)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Memory)') +
scale_x_continuous(breaks = seq(5,30,5)) +
scale_y_continuous(breaks = seq(0.4, 1, 0.1)) +
ylim(0.4, 1) +
theme_gray(base_size = 16)
ggsave('../figure_S1A.png', width = 5, height = 5)
ggplot(yrs_info, aes(yrs_exp, `overal pred acc`)) +
geom_point() +
geom_smooth(method = 'lm', color = '#F8766D', fill = '#F8766D') +
xlab('Years of Musical Experience') +
ylab('Overall Proportion Correct (Prediction)') +
scale_x_continuous(breaks = seq(5,30,5)) +
scale_y_continuous(breaks = seq(0.4, 1, 0.1)) +
ylim(0.4, 1) +
theme_gray(base_size = 16)
ggsave('../figure_S1B.png', width = 5, height = 5)
summary(lm(`overallMemAcc` ~ yrs_exp, yrs_info)) #NS
summary(lm(`overal pred acc` ~ yrs_exp, yrs_info)) #NS
